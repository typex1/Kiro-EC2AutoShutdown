name: Deploy EC2 Auto-Shutdown Lambda

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-1
  PYTHON_VERSION: '3.9'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: Run unit tests
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      uses: github/super-linter@v4
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_PYTHON_BLACK: false
        VALIDATE_PYTHON_FLAKE8: true
        VALIDATE_PYTHON_PYLINT: false

  deploy-dev:
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    environment: development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build SAM application
      run: sam build

    - name: Deploy to development
      run: |
        sam deploy \
          --stack-name ec2-auto-shutdown-dev \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET_DEV }} \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            ShutdownTagKey=AutoShutdown-Dev \
            ShutdownTagValue=yes \
            ScheduleExpression="cron(0 19 * * MON-FRI *)" \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Run integration tests
      run: |
        # Wait for deployment to be ready
        sleep 30
        
        # Run integration tests
        python -m pytest tests/integration/ -v
      env:
        STACK_NAME: ec2-auto-shutdown-dev
        AWS_REGION: ${{ env.AWS_REGION }}

  deploy-staging:
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build SAM application
      run: sam build

    - name: Deploy to staging
      run: |
        sam deploy \
          --stack-name ec2-auto-shutdown-staging \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET_STAGING }} \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            ShutdownTagKey=AutoShutdown-Staging \
            ShutdownTagValue=yes \
            ScheduleExpression="cron(0 18 * * MON-FRI *)" \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Setup monitoring
      run: |
        export STACK_NAME=ec2-auto-shutdown-staging
        export EMAIL_ADDRESS=${{ secrets.ALERT_EMAIL }}
        ./setup-monitoring.sh

    - name: Run smoke tests
      run: |
        # Test function invocation
        aws lambda invoke \
          --function-name ec2-auto-shutdown-staging \
          --payload '{}' \
          --cli-binary-format raw-in-base64-out \
          response.json
        
        # Verify response
        cat response.json
        
        # Check for successful execution
        if grep -q '"statusCode": 200' response.json; then
          echo "Smoke test passed"
        else
          echo "Smoke test failed"
          exit 1
        fi

  deploy-prod:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set up SAM CLI
      uses: aws-actions/setup-sam@v2

    - name: Build SAM application
      run: sam build

    - name: Deploy to production
      run: |
        sam deploy \
          --stack-name ec2-auto-shutdown-prod \
          --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET_PROD }} \
          --capabilities CAPABILITY_IAM \
          --parameter-overrides \
            ShutdownTagKey=AutoShutdown \
            ShutdownTagValue=yes \
            ScheduleExpression="cron(0 18 * * MON-FRI *)" \
          --no-confirm-changeset \
          --no-fail-on-empty-changeset

    - name: Setup production monitoring
      run: |
        export STACK_NAME=ec2-auto-shutdown-prod
        export EMAIL_ADDRESS=${{ secrets.PROD_ALERT_EMAIL }}
        export SNS_TOPIC_NAME=ec2-auto-shutdown-prod-alerts
        ./setup-monitoring.sh

    - name: Verify production deployment
      run: |
        # Test function invocation
        aws lambda invoke \
          --function-name ec2-auto-shutdown-prod \
          --payload '{}' \
          --cli-binary-format raw-in-base64-out \
          response.json
        
        # Verify response
        cat response.json
        
        # Check CloudWatch metrics
        aws cloudwatch get-metric-statistics \
          --namespace AWS/Lambda \
          --metric-name Invocations \
          --dimensions Name=FunctionName,Value=ec2-auto-shutdown-prod \
          --start-time $(date -u -d '5 minutes ago' +%Y-%m-%dT%H:%M:%S) \
          --end-time $(date -u +%Y-%m-%dT%H:%M:%S) \
          --period 300 \
          --statistics Sum

    - name: Create deployment notification
      run: |
        # Send deployment notification (customize as needed)
        echo "Production deployment completed successfully" > deployment-summary.txt
        echo "Stack: ec2-auto-shutdown-prod" >> deployment-summary.txt
        echo "Region: ${{ env.AWS_REGION }}" >> deployment-summary.txt
        echo "Timestamp: $(date)" >> deployment-summary.txt
        
        # You can add Slack/Teams notification here
        cat deployment-summary.txt

  cleanup:
    if: always()
    needs: [deploy-dev, deploy-staging, deploy-prod]
    runs-on: ubuntu-latest
    steps:
    - name: Cleanup temporary files
      run: |
        # Clean up any temporary files or resources
        echo "Cleaning up deployment artifacts..."
        rm -f response.json deployment-summary.txt